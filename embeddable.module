<?php
// $Id$

/**
 * @file
 * Defines numeric field types.
 */

/**
 * Implements hook_help().
 */
function embeddable_help($path, $arg) {
  switch ($path) {
    case 'admin/help#embeddable':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('The embeddable module provides a field for embedding entites, which itself may have any number of fields. See the <a href="@field-help">Field module help page</a> for more information about fields.', array('@field-help' => url('admin/help/field'))) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_entity_info().
 */
function embeddable_entity_info() {
  $return['embeddable'] = array(
    'label' => t('Embeddable'),
    // @todo: entity uri
    'label callback' => 'embeddable_label_callback',
    'entity class' => 'Embeddable',
    'controller class' => 'EntityAPIController',
    'base table' => 'embeddable',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'bundle' => 'field_name',
    ),
    'module' => 'embeddable',
  );
  return $return;
}



/**
 * Implements hook_entity_info_alter().
 */
function embeddable_entity_info_alter(&$info) {
  // Add info about the bundles. We need to this in hook_entity_info_alter()
  // to avoid infinite recursion, as field_info_fields() causes
  // hook_entity_info() to be invoked.
  foreach (field_info_fields() as $field_name => $field) {
    if ($field['type'] == 'embeddable') {
      $info['embeddable']['bundles'][$field_name] = array(
        'label' => t('Embeddable @field', array('@field' => $field_name)),
        'admin' => array(
          'path' => 'admin/structure/embeddables/%embeddable_field_name',
          'real path' => 'admin/structure/embeddables/' . strtr($field_name, array('_' => '-')),
          'bundle argument' => 3,
          // @todo: fix access.
          'access arguments' => array('administer content types'),
        ),
      );
    }
  }
}

/**
 * Menu callback for loading the bundle names.
 */
function embeddable_field_name_load($arg) {
  $field_name = strtr($arg, array('-' => '_'));
  if (($field = field_info_field($field_name)) && $field['type'] == 'embeddable') {
    return $field_name;
  }
}

/**
 * Label callback for the embeddable entity.
 */
function embeddable_label_callback($embeddable) {
  return $embeddable->label();
}

/**
 * Loads an embeddable.
 *
 * @return Embeddable
 *   The embeddable or FALSE.
 */
function embeddable_load($id) {
  $result = entity_load('embeddable', array($id));
  return $result ? reset($result) : FALSE;
}

/**
 * Class for embeddable entities.
 */
class Embeddable extends EntityDB {

  protected $fieldInfo, $hostEntityId, $hostEntityType;
  public $id, $field_name;

  public function __construct(array $values = array(), $entityType = NULL) {
    parent::__construct($values, 'embeddable');
    $this->fieldInfo = field_info_field($this->field_name);
    if (!$this->fieldInfo || $this->fieldInfo['type'] != 'embeddable') {
      throw new Exception("Invalid field name given.");
    }
  }

  /**
   * Provides info about the field on the host entity, which embeds this Embeddable.
   */
  public function fieldInfo() {
    return $this->fieldInfo;
  }

  /**
   * Provides info of the field instance containing the reference to this Embeddable.
   */
  public function instanceInfo() {
    if ($this->fetchHostDetails()) {
      return field_info_instance($this->hostEntityType(), $this->field_name, $this->hostEntityBundle());
    }
  }

  /**
   * Returns the label.
   */
  public function label() {
    // @todo make configurable.
    if ($instance = $this->instanceInfo()) {
      if ($this->id) {
        return t('@instance_label @count', array('@instance_label' => $instance['label'], '@count' => $this->delta() + 1));
      }
      else {
        return t('New @instance_label', array('@instance_label' => $instance['label']));
      }
    }
    return t('Unconnected embeddable');
  }

  /**
   * Returns the path used to view the entity.
   */
  public function path() {
    if ($this->id) {
      return embeddable_field_get_path($this->fieldInfo) . '/' . $this->id;
    }
  }

  /**
   * Returns the host entity, which embeds this Embeddable.
   */
  public function hostEntity() {
    if ($this->fetchHostDetails()) {
      $result = entity_load($this->hostEntityType, array($this->hostEntityId));
      return reset($result);
    }
  }

  /**
   * Returns the entity type of the host entity, which embeds this Embeddable.
   */
  public function hostEntityType() {
    if ($this->fetchHostDetails()) {
      return $this->hostEntityType;
    }
  }

  /**
   * Returns the id of the host entity, which embeds this Embeddable.
   */
  public function hostEntityId() {
    if ($this->fetchHostDetails()) {
      return $this->hostEntityId;
    }
  }

  /**
   * Returns the bundle of the host entity, which embeds this Embeddable.
   */
  public function hostEntityBundle() {
    if ($entity = $this->hostEntity()) {
      list($id, $rev_id, $bundle) = entity_extract_ids($this->hostEntityType, $entity);
      return $bundle;
    }
  }

  protected function fetchHostDetails() {
    if (!isset($this->hostEntityId)) {
      if ($this->id) {
        // For saved embeddables, the link has to be created.
        $query = new EntityFieldQuery();
        $query->fieldCondition($this->fieldInfo(), 'value', $this->id);
        $result = $query->execute();
        list($this->hostEntityType, $data) = each($result);
        $this->hostEntityId = $data ? key($data) : FALSE;
      }
      elseif (isset($this->host_entity_type) && isset($this->host_entity)) {
        // During creationg, read the public host entity properties.
        // See Embeddable::save().
        $this->hostEntityType = $this->host_entity_type;
        list($this->hostEntityId) = entity_extract_ids($this->hostEntityType, $this->host_entity);
      }
      else {
        // No host entity available yet.
        $this->hostEntityId = FALSE;
      }
    }
    return !empty($this->hostEntityId);
  }

  /**
   * Determines the $delta of the reference pointing to this embeddable.
   */
  public function delta() {
    if ($this->id && $entity = $this->hostEntity()) {
      foreach ($entity->{$this->field_name} as $lang => &$data) {
        foreach ($data as $delta => $item) {
          if ($item['value'] == $this->id) {
            return $delta;
          }
        }
      }
    }
  }

  /**
   * Save the Embeddable.
   *
   * During creation a host entity has to be specified, so that the Embeddable
   * can be referenced from the host entities field. For the link to be fully
   * established, the host entity object is updated automatically to include a
   * reference on this embeddable.
   *
   * @param $host_entity_type
   *   The type of the host entity. During creation either this argument or the
   *   "host_entity_type" property has to be specified. As exception FALSE may
   *   be passed, what skips creating the link to the host entity totally
   *   (internal usage).
   * @param $host_entity
   *   The host entity. During creation either this argument or the
   *   "host_entity" property has to be specified.
   */
  public function save($host_entity_type = NULL, $host_entity = NULL) {
    $transaction = db_transaction();
    try {
      // Make sure we have a host entity during creation.
      if (!empty($this->is_new) && !isset($host_entity) && !isset($this->host_entity)) {
        throw new Exception("Unable to create an Embeddable without a given host entity.");
      }
      $is_new = !empty($this->is_new);
      $return = entity_get_controller($this->entityType)->save($this, $transaction);

      // Create the link to the host entity.
      if ($is_new && $host_entity_type !== FALSE) {
        $host_entity = isset($host_entity) ? $host_entity : $this->host_entity;
        $host_entity_type = isset($host_entity_type) ? $host_entity_type : $this->host_entity_type;

        $lang = isset($this->language) ? $this->language : LANGUAGE_NONE;
        $host_entity->{$this->field_name}[$lang][] = array('value' => $this->id);
        entity_metadata_entity_save($host_entity_type, $host_entity);
      }
      // @todo: Should we implement a "garbage collector" for embeddables that
      // somehow were not properly embedded due to the host entity never has
      // been saved?

      return $return;
    }
    catch (Exception $e) {
      $transaction->rollback($this->entityType, $e->getMessage(), array(), WATCHDOG_ERROR);
      return FALSE;
    }
  }

  /**
   * Delete the embeddable.
   */
  public function delete() {
    parent::delete();
    // Delete the reference of the host entity.
    if ($this->id && $entity = $this->hostEntity()) {
      foreach ($entity->{$this->field_name} as $lang => &$data) {
        foreach ($data as $delta => $item) {
          if ($item['value'] == $this->id) {
            unset($data[$delta]);
          }
        }
      }
      entity_metadata_entity_save($this->hostEntityType(), $entity);
    }
  }
}

/**
 * Implements hook_menu().
 */
function embeddable_menu() {
  $items = array();
  if (module_exists('field_ui')) {
    $items['admin/structure/embeddables'] = array(
      'title' => 'Embeddables',
      'description' => 'Manage fields on embeddables.',
      'page callback' => 'embeddables_overview',
      //@todo add a separate permission?
      'access arguments' => array('administer content types'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'embeddable.admin.inc',
    );
  }

  // Add menu paths for viewing/editing/deleting embeddables.
  foreach (field_info_fields() as $field) {
    if ($field['type'] == 'embeddable') {
      $path = embeddable_field_get_path($field);
      $count = count(explode('/', $path));

      $items[$path . '/%embeddable'] = array(
        'page callback' => 'embeddable_page_view',
        'page arguments' => array($count),
        'access callback' => 'embeddable_access',
        'access arguments' => array('view', $count),
        'file' => 'embeddable.pages.inc',
      );
      $items[$path . '/%embeddable/view'] = array(
        'title' => 'View',
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => -10,
      );
      $items[$path . '/%embeddable/edit'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('embeddable_form', $count),
        'access callback' => 'embeddable_access',
        'access arguments' => array('view', $count),
        'title' => 'Edit',
        'type' => MENU_LOCAL_TASK,
        'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
        'file' => 'embeddable.pages.inc',
      );
      $items[$path . '/%embeddable/delete'] = array(
        'page callback' => 'drupal_get_form',
        'page arguments' => array('embeddable_delete_confirm', $count),
        'access callback' => 'embeddable_access',
        'access arguments' => array('view', $count),
        'title' => 'Delete',
        'type' => MENU_LOCAL_TASK,
        'context' => MENU_CONTEXT_INLINE,
        'file' => 'embeddable.pages.inc',
      );
      $items[$path . '/add/%embeddable_field_name/%/%'] = array(
        'page callback' => 'embeddable_add',
        'page arguments' => array($count + 1, $count + 2, $count + 3),
        'access callback' => 'embeddable_access',
        'access arguments' => array('view', $count),
        'title' => 'Delete',
        'type' => MENU_LOCAL_TASK,
        'context' => MENU_CONTEXT_INLINE,
        'file' => 'embeddable.pages.inc',
      );
    }
  }
  return $items;
}

/**
 * Implements hook_menu_alter() to fix the embeddables admin UI tabs.
 */
function embeddable_menu_alter(&$items) {
  if (module_exists('field_ui')) {
    // Make the fields task the default local task.
    $items['admin/structure/embeddables/%embeddable_field_name'] = $items['admin/structure/embeddables/%embeddable_field_name/fields'];
    $items['admin/structure/embeddables/%embeddable_field_name']['type'] = MENU_CALLBACK;
    $items['admin/structure/embeddables/%embeddable_field_name/fields'] = array(
      'title' => 'Manage fields',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 1,
    );
  }
}

// @todo Implement + specify @hook_entity_info().
function embeddable_access() {
  return TRUE;
}

/**
 * Implements hook_field_info().
 */
function embeddable_field_info() {
  return array(
    'embeddable' => array(
      'label' => t('Embeddable'),
      'description' => t('This field stores references to embedded entities, which itself may contain any number of fields.'),
      'instance_settings' => array(),
      'default_widget' => 'hidden',
      'default_formatter' => 'embeddable_list',
      // As of now there is now UI for setting the path.
      'settings' => array('path' => ''),
    ),
  );
}

/**
 * Returns the base path to use for embeddables.
 */
function embeddable_field_get_path($field) {
  if (empty($field['settings']['path'])) {
    // Provide a sane default using the field name without the 'field' prefix.
    if (strpos($field['field_name'], 'field_') === 0) {
      return 'embeddable/' . substr($field['field_name'], 6);
    }
    return 'embeddable/' . $field['field_name'];
  }
  return $field['settings']['path'];
}

/**
 * Implements hook_field_presave().
 */
function embeddable_field_presave($entity_type, $entity, $field, $instance, $langcode, &$items) {
  foreach ($items as &$item) {
    // In case the entity has been loaded / created, save it and set the id.
    if (isset($item['entity'])) {
      // Pass FALSE, as we already have the link to the host entity.
      $item['entity']->save(FALSE);
      $item = array('value' => $item['entity']->id);
    }
  }
}

/**
 * Implements hook_field_delete().
 */
function embeddable_field_delete($entity_type, $entity, $field, $instance, $langcode, &$items) {
  // Also delete all embedded entities.
  entity_delete_multiple('embeddable', embeddable_field_item_to_ids($items));
}

/**
 * Get an array of embeddable IDs stored in the given field items.
 */
function embeddable_field_item_to_ids($items) {
  $ids = array();
  foreach ($items as $item) {
    if (!empty($item['value'])) {
      $ids[] = $item['value'];
    }
  }
  return $ids;
}

/**
 * Implements hook_field_is_empty().
 */
function embeddable_field_is_empty($item, $field) {
  return empty($item['value']);
}

/**
 * Implements hook_field_formatter_info().
 */
function embeddable_field_formatter_info() {
  return array(
    'embeddable_list' => array(
      'label' => t('List embeddables'),
      'field types' => array('embeddable'),
      'settings' =>  array(
        'edit' => t('Edit'),
        'delete' => t('Delete'),
        'add' => t('Add'),
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function embeddable_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $form['edit'] = array(
    '#type' => 'textfield',
    '#title' => t('Edit link title'),
    '#default_value' => $settings['edit'],
    '#description' => t('Leave the title empty, to hide the link.'),
  );
  $form['delete'] = array(
    '#type' => 'textfield',
    '#title' => t('Delete link title'),
    '#default_value' => $settings['delete'],
    '#description' => t('Leave the title empty, to hide the link.'),
  );
  $form['add'] = array(
    '#type' => 'textfield',
    '#title' => t('Add link title'),
    '#default_value' => $settings['add'],
    '#description' => t('Leave the title empty, to hide the link.'),
  );
  return $form;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function embeddable_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $links = array_filter($settings);
  if ($links) {
    return '<em>Links:</em> ' . check_plain(implode(', ', $links));
  }
  else {
    return t('Not showing any links.');
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function embeddable_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $element = array();
  $settings = $display['settings'];

  switch ($display['type']) {
    case 'embeddable_list':

      foreach ($items as $delta => $item) {
        $embeddable = isset($item['entity']) ? $item['entity'] : embeddable_load($item['value']);

        if ($embeddable) {
          $output = l($embeddable->label(), $embeddable->path());
          $links = array();
          foreach (array('edit', 'delete') as $op) {
            if ($settings[$op]) {
              $links[] = l($settings[$op], $embeddable->path() . '/' . $op, array('query' => drupal_get_destination()));
            }
          }
          if ($links) {
            $output .= ' (' . implode('|', $links) . ')';
          }
          $element[$delta] = array('#markup' => $output);
        }
      }
      if ($settings['add'] && ($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED || count($items) < $field['cardinality'])) {
        $path = embeddable_field_get_path($field);
        list($id) = entity_extract_ids($entity_type, $entity);
        $add_path = $path . '/add/' . strtr($field['field_name'], array('_' => '-')) . '/' . $entity_type . '/' . $id;
        $element['#suffix'] = '<div class="embeddable-list-add">' . l($settings['add'], $add_path, array('query' => drupal_get_destination())) . "</div>";
      }
      break;
  }
  return $element;
}

/**
 * Implements hook_field_widget_info().
 */
function embeddable_field_widget_info() {
  return array(
    'embeddable_hidden' => array(
      'label' => t('Hidden'),
      'field types' => array('embeddable'),
    ),
  );
}

/**
 * Implements hook_field_create_field().
 */
function embeddable_field_create_field($field) {
  if ($field['type'] == 'embeddable') {
    // Clear caches.
    entity_info_cache_clear();
    menu_rebuild();
  }
}
